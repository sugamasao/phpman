<?php
ini_set('display_errors','On');
ini_set('html_errors','Off');
ini_set('error_reporting',E_ALL);
ini_set('xdebug.var_display_max_children',-1);
ini_set('xdebug.var_display_max_data',-1);
ini_set('xdebug.var_display_max_depth',-1);

if(ini_get('date.timezone') == ''){
	date_default_timezone_set('Asia/Tokyo');
}
if(extension_loaded('mbstring')){
	if('neutral' == mb_language()) mb_language('Japanese');
	mb_internal_encoding('UTF-8');
}
set_error_handler(function($n,$s,$f,$l){
	throw new \ErrorException($s,0,$n,$f,$l);
});
$dp = function($src){
	if(empty($src)) return;
	return '?>'.gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$src))));
};
// lib
eval($dp(''));
// func
eval($dp('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'));

if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
	$argv = array_slice($_SERVER['argv'],1);
	$value = (empty($argv)) ? null : array_shift($argv);
	$params = array();
	
	if(substr($value,0,1) == '-'){
		array_unshift($argv,$value);
		$value = null;
	}
	for($i=0;$i<sizeof($argv);$i++){
		if($argv[$i][0] == '-'){
			$k = substr($argv[$i],1);
			$v = (isset($argv[$i+1]) && $argv[$i+1][0] != '-') ? $argv[++$i] : '';
			if(isset($params[$k]) && !is_array($params[$k])) $params[$k] = array($params[$k]);
			$params[$k] = (isset($params[$k])) ? array_merge($params[$k],array($v)) : $v;
		}
	}
	if(isset($params['encode'])){
		$p = realpath($params['encode']);
		if($p === false) throw \RuntimeException($params['encode'].' not found');
		
		$src = '';
		if(is_dir($p)){
			foreach(new \DirectoryIterator($p) as $f){
				if($f->isFile()){
					$src = $src.file_get_contents($f->getPathname());
				}
			}
		}else{
			$src = file_get_contents($p);
		}
		$encode = str_replace(PHP_EOL,'',base64_encode(gzcompress($src)));
		print(PHP_EOL.$encode.PHP_EOL.PHP_EOL);
		exit;
	}
	
	if(is_file($f=getcwd().'/bootstrap.php') || is_file($f=getcwd().'/vendor/autoload.php')){
		ob_start();
		include_once($f);
		ob_end_clean();
	}
	spl_autoload_register(function($c){
		$cp = str_replace('\\','/',(($c[0] == '\\') ? substr($c,1) : $c));
		foreach(explode(PATH_SEPARATOR,get_include_path()) as $p){
			if(!empty($p) && ($r = realpath($p)) !== false && $p !== '.'){
	
				if(is_file($f=($r.'/'.$cp.'.php')) || is_file($f=($r.'/'.$cp.'/'.basename($cp).'.php'))){
					require_once($f);
					if(class_exists($c,false) || interface_exists($c,false)) return true;
				}
			}
		}
		return false;
	},true,false
	);
	$entry_dir = $test_dir = $lib_dir = $func_dir = null;
	$urls = array();
		
	if(is_file($f=__DIR__.'/testman_urls.php')){
		$urls = include($f);
		if(!is_array($urls)) throw new \RuntimeException('urls was array');
	}
	if(isset($params['entry_dir'])) $entry_dir = realpath($entry_dir);
	if(isset($params['test_dir'])) $test_dir = realpath($test_dir);
	if(isset($params['lib_dir'])) $lib_dir = realpath($lib_dir);
	if(isset($params['func_dir'])) $func_dir = realpath($func_dir);
	if(!isset($entry_dir)) $entry_dir = __DIR__;
	
	if(isset($params['report'])){
		if(!extension_loaded('xdebug')) die('xdebug extension not loaded'.PHP_EOL);
		
		$db = getcwd().'/report';
		if(!is_dir($db)) mkdir($db,0777,true);
		$db = $db.'/'.date('Ymd_His').(empty($value) ? '' : '_'.str_replace(array('\\','/'),'_',$value));
		if(isset($params['m'])) $db = $db.'_'.$params['m'];
		if(isset($params['b'])) $db = $db.'_'.$params['b'];
		$db = $db.'.report';
	
		\testman\Coverage::start($db,$entry_dir,$lib_dir);
	}
	\testman\TestRunner::init($entry_dir,$test_dir,$lib_dir,$func_dir);
	\testman\TestRunner::set_urls($urls);
	\testman\TestRunner::info();
		
	if(isset($value)){
		\testman\TestRunner::verify_format(
				$value
				,(isset($params['m']) ? $params['m'] : null)
				,(isset($params['b']) ? $params['b'] : null)
				,true
		);
	}else{
		\testman\TestRunner::run_all(true);
	}
	\testman\TestRunner::output();
}else{
	// WEB
	$resource_bin = array();
	$resource_bin['/splash.jpg'] = '';
	
	if(isset($_GET['resource'])){
		$resource = $_GET['resource'];
		
		if(isset($resource_bin[$resource])){
			$mime = 'application/octet-stream';	
			if(preg_match('/.+\.(\w+)$/',$resource,$m)){
				switch($m[1]){
					case 'jpg':
					case 'jpeg': $mime = 'image/jpeg;'; break;
					case 'html':  $mime = 'text/html'; break;
				}
				header('Content-Type: '.$mime.';');					
			}
			print(gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$resource_bin[$resource])))));
			exit;
		}
		header('HTTP/1.1 404 Not Found');
		exit;			
	}
	
	$in_value = function($key,$default=null){
		$params = isset($_GET) ? $_GET : array();
		if(!isset($params[$key])) return $default;
		return $params[$key];
	};
	
	$report_dir = getcwd().'/report';
	$dblist = array();
	if(is_dir($report_dir)){
		foreach(new RecursiveDirectoryIterator(
				$report_dir,
				\FilesystemIterator::CURRENT_AS_FILEINFO|\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::UNIX_PATHS
		) as $e){
			if(preg_match('/^.+\.report$/',$e->getFilename())){
				$db_path = str_replace($report_dir.'/','',$e->getFilename());
				$dblist[$db_path] = $e->getMTime();
			}
		}
		if(!empty($dblist)){
			arsort($dblist);
			$dblist = array_combine(array_keys($dblist),array_keys($dblist));
		}
	}
	try{
		$uri = (isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '');
		$db = $in_value('db');

		if(empty($db) && !empty($dblist)) $db = current($dblist);
		$db_file = \testman\Util::path_absolute($report_dir,$db);
		$template = new \testman\Template($uri.'?resource=');
		$template->vars('t',new \testman\Helper());
		$template_name = null;

		switch($in_value('view_mode')){
			case 'source':
				if($in_value('file') != ''){
					$template->vars('info',\testman\Coverage::file($db_file,$in_value('file')));
					$template->vars('file',$in_value('file'));
					$template_name = 'source';
				}
				break;
			case 'result':
				list($success,$fail,$none,$failure) = \testman\Coverage::test_result($db_file);
				$template->vars('success',$success);
				$template->vars('fail',$fail);
				$template->vars('none',$none);
				$template->vars('failure',$failure);
				$template_name = 'test_result';
				break;
			case 'all':
				list($file_list,$avg) = \testman\Coverage::all_file_list($db_file);
				$template->vars('file_list',$file_list);
				$template->vars('avg',$avg);
				$template_name = 'coverage_list';
				break;
			case 'tree':
				$path = $in_value('path');
				list($dir_list,$file_list,$parent_path,$avg) = \testman\Coverage::dir_list($db_file,$path);
					
				$template->vars('dir_list',$dir_list);
				$template->vars('file_list',$file_list);
				$template->vars('parent_path',$parent_path);
				$template->vars('avg',$avg);
				$template->vars('path',$path);
				$template_name = 'coverage_list';
				break;
			case 'help':
				$template_name = 'help';
				break;
			default:
		}
		if(empty($template_name)) $template_name = 'top';
		$template->vars('dblist',$dblist);
		$template->vars('db',$db);
		$template->vars('view_mode',$in_value('view_mode'));
		$template->output(__FILE__,$template_name);
	}catch(Exception $e){
		die($e->getMessage());
	}
}
exit;
?>
<rt:template name="index">
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Testman</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">	
		<style type="text/css"> 
			body{ padding-top: 60px }	
			.covered{ background-color: #ecffec; }
			.uncovered{ background-color: #ffecec; }
			.ignore{ background-color: #fcfcfc; }
			.popover{ width: 500px; }
			.code{ 
				font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal;
				width:100%; height: 16px; line-height: 0px; margin: 0; white-space: pre; padding-left: 10px; padding-right: 10px;		
			}
		</style>
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
		<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
	</head>
	<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container">
				<a class="brand" href="#">Testman</a>
				<div class="nav-collapse collapse">
					<ul class="nav">
						<li class="{$t.cond_pattern_switch($view_mode,'tree','active','')}"><a href="?view_mode=tree&path=&db={$db}">Tree</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'file','active','')}"><a href="?view_mode=all&db={$db}">All</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'result','active','')}"><a href="?view_mode=result&db={$db}">Result</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'help','active','')}"><a href="?view_mode=help">Help</a></li>
					</ul>
				</div>
			</div>
		</div>
	</div>
	<div class="container">	
	<rt:block name="contents">
		<form rt:ref="true">
			<input type="hidden" name="view_mode" />
			<input type="hidden" name="path" />
			<input type="hidden" name="file" />
			<input type="hidden" name="db" />
			<select rt:param="dblist" name="db" onChange="this.form.submit()" style="width:300px;"></select>
		</form>
		<rt:block name="inner_content">
		</rt:block>		
	</rt:block>
	</div>
	<rt:block name="footer_block"></rt:block>
	</body>
	</html>
</rt:template>

<rt:template name="top">
	<rt:extends href="#help" />
	
	<rt:block name="footer_block">
		<div id="splash" class="modal hide fade" tabindex="-1" style="width:380px;">
			<div class="modal-body" style="padding: 0;">
				<img src="splash.jpg" />
			</div>
		</div>
		
		<script type="text/javascript">
		$('#splash').modal('show');
	
		setTimeout(function(){
			$('#splash').modal('hide');	
		},200);
		</script>
	</rt:block>
</rt:template>

<rt:template name="test_result">
	<rt:extends href="#index" />
	
	<rt:block name="inner_content">
	<span class="label label-success">Success: {$success}</span>
	<span class="label label-important">Failure: {$fail}</span>
	<span class="label label-warning">None: {$none}</span>
	
	<h3>Failure</h3>
	<table rt:param="{$failure}" rt:var="result" class="table table-striped table-bordered table-condensed">
	<thead>
	<tr>
		<th>file</th>
		<th>line</th>
		<th>expected</th>
		<th>actual</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>{$result['location']['file']}</td>
		<td style="text-align: right;">{$result['location']['line']}</td>	
		<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['expected']}</pre></td>
		<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['actual']}</pre></td>
	</tr>
	</tbody>
	</table>
	</rt:block>
</rt:template>

<rt:template name="source">
	<rt:extends href="#index" />

	<rt:block name="inner_content">
	<h2>{$info['file_path']}</h2>
	<table rt:param="{$info['view']}" rt:var="f" rt:counter="cnt">
	<tr class="{$f['class']} {$f['class']}_tooltip" data-content="{$t.htmlencode($t.nl2br($f['test_path']))}">
		<td align="right" style="width:50px;"><a name="{$cnt}"></a><a href="#{$cnt}">{$cnt}</a></td>
		<td class="code">{$t.htmlencode($f['value'])}</td>
	</tr>
	</table>
	<div style="height:50px;"></div>
	
	<script type="text/javascript">$('.covered_tooltip').popover({trigger: 'hover',html:true,placement:'top',title:'covered test'});</script>
	</rt:block>
</rt:template>

<rt:template name="coverage_list">
	<rt:extends href="#index" />

	<rt:block name="inner_content">
	<h2>{$db}</h2>
	<table>
	<tr>
		<td style="width:350px;">
			<div class="progress progress-striped active">
				<div class="bar bar-success" style="width: {$avg['covered']}%;"></div>
				<div class="bar bar-danger" style="width: {$avg['uncovered']}%;"></div>
			</div>
		</td>
		<td>
			<div style="height: 40px;">&nbsp;{$avg['avg']}%</div>
		</td>
	</tr>
	</table>
	<rt:if param="{$path}">
		<h3>( {$path} )</h3>
	</rt:if>
	<rt:if param="{$dir_list}">
		<table rt:param="dir_list" rt:var="dir" class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td><a href="?view_mode=tree&path={$dir}&db={$db}">{$dir}</a></td>
		</tr>
		</tbody>
		</table>
	</rt:if>
	
	<rt:if param="{$file_list}">
		<table rt:param="file_list" rt:var="file" class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td><a href="?view_mode=source&file={$file['file_path']}&db={$db}">{$file['file_path']}</a></td>
			<td style="width:110px;">
				<div class="progress">
					<div class="bar bar-success" style="width: {$file['covered']}%;"></div>
					<div class="bar bar-danger" style="width: {$file['uncovered']}%;"></div>
				</div>
			</td>
			<td style="width:30px; text-align: right;">{$file['percent']}%</td>
			<td style="width:80px; text-align: right; color: #666666;">{$file['covered_len']} / {$file['active_len']}</td>
		</tr>
		</tbody>
		</table>
	</rt:if>
	</rt:block>
</rt:template>

<rt:template name="help">
	<rt:extends href="#index" />
	
	<rt:block name="contents">
	<div style="margin-bottom: 50px;">
	<h3>Requirements</h3>
	<pre trans="true">
	PHP 5.3 (or later).
	must have Xdebug 2.2.1 (or later) in order to gather code coverage information.
	</pre>
	
	<div style="margin-bottom: 50px;">
	<h4>Install Xdebug</h4>
	&gt;&nbsp;<a href="http://xdebug.org/docs/install">http://xdebug.org/docs/install</a>
	
	<h5>for MAMP</h5>
	
	/Applications/MAMP/bin/php/php5.4.4/conf/php.ini
	<pre>
	[xdebug]
	zend_extension="/Applications/MAMP/bin/php/php5.4.4/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so"
	xdebug.overload_var_dump = 0
	
	xdebug.profiler_output_name = %t.%s.%p.profile
	xdebug.profiler_output_dir = "/Applications/MAMP/bin/php/php5.4.4/profile"
	;xdebug.profiler_enable = 1
	xdebug.profiler_enable_trigger = 1
	
	xdebug.default_enable = 1
	xdebug.remote_enable  = 1
	xdebug.remote_port    = 9000
	xdebug.remote_handler = dbgp
	xdebug.remote_autostart = 1
	xdebug.remote_connect_back = 1
	</pre>
	<p>
	enable the profiler by using a GET/POST or COOKIE variable of the name XDEBUG_PROFILE.<Br />
	stepping PDT by sending an XDEBUG_SESSION_START=ECLIPSE_DBGP.
	</p>
	</div>
	
	<div style="margin-bottom: 50px;">
	<h4>Code coverage records in remote testing</h4>
	<a href="?coverage_client=dl">download</a> - to include this script
	</div>
	
	
	<div style="margin-bottom: 50px;">
	<h3>Running Tests</h3>
	<pre trans="true">
	&gt; php testman.php [class path or test file path]
	</pre>
	
	<h4>options</h4>
	
	<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>-m</td>
		<td>method name</td>
	</tr>
	<tr>
		<td>-b</td>
		<td>block name</td>
	</tr>
	<tr>
		<td>-bootstrap</td>
		<td>bootstrap options include the path to the file</td>
	</tr>
	<tr>
		<td>-dir</td>
		<td>htdocs directory</td>
	</tr>
	<tr>
		<td>-test_dir</td>
		<td>unit test files directory</td>
	</tr>
	<tr>
		<td>-lib_dir</td>
		<td>library class files directory</td>
	</tr>
	<tr>
		<td>-func_dir</td>
		<td>function files directory</td>
	</tr>
	<tr>
		<td>-report</td>
		<td>filename for the report</td>
	</tr>
	<tr>
		<td>-xml</td>
		<td>XML output to a file of test results</td>
	</tr>
	</tbody>
	</table>
	
	<div style="margin-bottom: 20px;"></div>
	<h3>Test code for class</h3>
	<p>
		Test code for the class is described in the comment block.<br />
		(comment block /&lowast;&lowast;&lowast;〜&lowast;/ - that's <span class="text-error">three asterisks</span>)<br />
		test of the method described in the code of the method.<br />
		first line that starts with a # is a block name.<br />
		<span class="text-error">static::</span> introduces its class.
	</p>
	<pre>
	&lt;?php
	class Sample{
	&nbsp;&nbsp;public function abc($str){
	&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
	&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast; $self = new self();
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast; eq("(hoge)",$self->abc("hoge"));
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# fuga
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;}
	&nbsp;&nbsp;static public function def($str){
	&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
	&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;}
	&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
	&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
	&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
	&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp; 
	&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;# __setup__
	&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
	&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;# __teardown__
	&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
	&nbsp;&nbsp; &lowast;/
	}
	</pre>
	<p>
		__teardown__ and __setup__ is a special block name (rather than in the method) in the class. <br />
		__setup__ is called before the test block. <br />
		__teardown__ is called after the test block.
	</p>
	
	</div>
	
	
	<div style="margin-bottom: 50px;">
	<h3>Assertion functions</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>eq($expected,$actual)</td>
			<td>$expectation === $result</td>
		</tr>
		<tr>
			<td>neq($expected,$actual)</td>
			<td>$expectation !== $result</td>
		</tr>
		<tr>
			<td>meq($keyword,$string)</td>
			<td>match</td>
		</tr>
		<tr>
			<td>nmeq($keyword,$string)</td>
			<td>not match</td>
		</tr>
		<tr>
			<td>success()</td>
			<td>success</td>
		</tr>
		<tr>
			<td>fail()</td>
			<td>fail</td>
		</tr>
		<tr>
			<td>notice($msg)</td>
			<td>message</td>
		</tr>	
		</tbody>
	</table>
	</div>
	
	<div style="margin-bottom: 50px;">
	<h3>functions</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>newclass($class_source)</td>
			<td>Get a unique instances of a class</td>
		</tr>
		<tr>
			<td>pre($text)</td>
			<td>Get a heredoc</td>
		</tr>
		<tr>
			<td>test_map_url($map_name,$arg...)</td>
			<td>Get a remote url</td>
		</tr>
		<tr>
			<td>b()</td>
			<td>Get a instances of HTTP request class (<a href="#Http">Http</a>)</td>
		</tr>
		<tr>
			<td>xml(&$xml,$src,$name=null)</td>
			<td>Get a instances of XML class (<a href="#Xml">Xml</a>)</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	
	<a name="Http"></a>
	<div style="margin-bottom: 50px;">
	<h3>Class:Http method detail</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>do_post($url)</td>
			<td>POST requests</td>
		</tr>
		<tr>
			<td>do_get($url)</td>
			<td>GET requests</td>
		</tr>
		<tr>
			<td>vars($name,$value)</td>
			<td>Set up request parameter</td>
		</tr>
		<tr>
			<td>header($name,$value)</td>
			<td>Set up request header</td>
		</tr>
		<tr>
			<td>status()</td>
			<td>Gets the response status code</td>
		</tr>
		<tr>
			<td>head()</td>
			<td>Gets the response header</td>
		</tr>
		<tr>
			<td>body()</td>
			<td>Gets the response body</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	<a name="Xml"></a>
	<div style="margin-bottom: 50px;">
	<h3>Class:Xml method detail</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>get()</td>
			<td>Gets the XML string</td>
		</tr>
		<tr>
			<td>in($name)</td>
			<td>Find of XML node</td>
		</tr>
		<tr>
			<td>in_attr($name)</td>
			<td>Gets the attribute</td>
		</tr>
		<tr>
			<td>value()</td>
			<td>Gets the Xml value</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	</rt:block>

</rt:template>


