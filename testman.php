<?php
ini_set('display_errors','On');
ini_set('html_errors','Off');
ini_set('error_reporting',E_ALL);
ini_set('xdebug.var_display_max_children',-1);
ini_set('xdebug.var_display_max_data',-1);
ini_set('xdebug.var_display_max_depth',-1);

if(ini_get('date.timezone') == ''){
	date_default_timezone_set('Asia/Tokyo');
}
if(extension_loaded('mbstring')){
	if('neutral' == mb_language()) mb_language('Japanese');
	mb_internal_encoding('UTF-8');
}
set_error_handler(function($n,$s,$f,$l){
	throw new \ErrorException($s,0,$n,$f,$l);
});
$dp = function($src){
	if(empty($src)) return;
	return '?>'.gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$src))));
};
// lib
eval($dp(''));
// func
eval($dp('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'));

$conf = array();
$ignore_path = array(__FILE__);
if(is_file($f=getcwd().'/bootstrap.php') || is_file($f=getcwd().'/vendor/autoload.php')){
	ob_start();
		include_once($f);
	ob_end_clean();
	$ignore_path[] = $f;
}
spl_autoload_register(function($c){
	$cp = str_replace('\\','/',(($c[0] == '\\') ? substr($c,1) : $c));
	foreach(explode(PATH_SEPARATOR,get_include_path()) as $p){
		if(!empty($p) && ($r = realpath($p)) !== false && $p !== '.'){

			if(is_file($f=($r.'/'.$cp.'.php')) || is_file($f=($r.'/'.$cp.'/'.basename($cp).'.php'))){
				require_once($f);
				if(class_exists($c,false) || interface_exists($c,false)) return true;
			}
		}
	}
	return false;
},true,false
);
if(is_file($f=__DIR__.'/'.substr(basename(__FILE__),0,-4).'.conf.php')){
	$conf = include(realpath($f));
	$ignore_path[] = realpath($f);
	
	if(!is_array($conf)) throw new \RuntimeException('invalid '.$f);
	if(isset($conf['bootstrap'])){
		if(!is_array($conf['bootstrap'])) $conf['bootstrap'] = array($conf['bootstrap']);
		foreach($conf['bootstrap'] as $b){
			include(realpath($b));
			$ignore_path[] = realpath($b);
		}
	}
}
if(!isset($_SERVER['REQUEST_URI']) || !isset($_SERVER['REQUEST_METHOD'])){
	$entry_dir = $test_dir = $lib_dir = $func_dir = $report_dir = null;
	$params = $urls = array();
	
	$argv = array_slice($_SERVER['argv'],1);
	$value = (empty($argv)) ? null : array_shift($argv);
	
	if(substr($value,0,1) == '-'){
		array_unshift($argv,$value);
		$value = null;
	}	
	foreach(array('entry_dir','test_dir','lib_dir','func_dir','report_dir','urls') as $k){
		if(array_key_exists($k,$conf)) $params[$k] = $conf[$k];
	}
	for($i=0;$i<sizeof($argv);$i++){
		if($argv[$i][0] == '-'){
			$k = substr($argv[$i],1);
			$v = (isset($argv[$i+1]) && $argv[$i+1][0] != '-') ? $argv[++$i] : '';
			if(isset($params[$k]) && !is_array($params[$k])) $params[$k] = array($params[$k]);
			$params[$k] = (isset($params[$k])) ? array_merge($params[$k],array($v)) : $v;
		}
	}
	if(isset($params['urls'])) $urls = $params['urls'];
	if(isset($params['entry_dir'])) $entry_dir = realpath($params['entry_dir']);
	if(isset($params['test_dir'])) $test_dir = realpath($params['test_dir']);
	if(isset($params['lib_dir'])) $lib_dir = realpath($params['lib_dir']);
	if(isset($params['func_dir'])) $func_dir = realpath($params['func_dir']);
	if(isset($params['report_dir'])) $report_dir = realpath($params['report_dir']);
	if(!isset($entry_dir)) $entry_dir = __DIR__;
	if(!isset($report_dir)) $report_dir = __DIR__.'/report';
	
	if(isset($params['encode'])){
		$p = realpath($params['encode']);
		if($p === false) throw \RuntimeException($params['encode'].' not found');
		
		$src = '';
		if(is_dir($p)){
			foreach(new \DirectoryIterator($p) as $f){
				if($f->isFile()){
					$src = $src.file_get_contents($f->getPathname());
				}
			}
		}else{
			$src = file_get_contents($p);
		}
		$encode = str_replace(PHP_EOL,'',base64_encode(gzcompress($src)));
		print(PHP_EOL.$encode.PHP_EOL.PHP_EOL);
		exit;
	}
	if(isset($params['report'])){
		if(!extension_loaded('xdebug')) die('xdebug extension not loaded'.PHP_EOL);
		if(!is_dir($report_dir)) mkdir($db,0777,true);
		$db = $report_dir.'/'.date('Ymd_His').(empty($value) ? '' : '_'.str_replace(array('\\','/'),'_',$value));
		if(isset($params['m'])) $db = $db.'_'.$params['m'];
		if(isset($params['b'])) $db = $db.'_'.$params['b'];
		$db = $db.'.report';
	
		\testman\Coverage::start($db,$entry_dir,array($entry_dir,$test_dir,$lib_dir,$func_dir));
	}
	\testman\TestRunner::init($entry_dir,$test_dir,$lib_dir,$func_dir,$ignore_path);
	if(is_array($urls)) \testman\TestRunner::set_urls($urls);
	\testman\TestRunner::info();
		
	if(isset($value)){
		\testman\TestRunner::verify_format(
				$value
				,(isset($params['m']) ? $params['m'] : null)
				,(isset($params['b']) ? $params['b'] : null)
				,true
		);
	}else{
		\testman\TestRunner::run_all(true);
	}
	\testman\TestRunner::output();
}else{
	$resource_bin = array();
	$resource_bin['/splash.jpg'] = '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';
	
	if(isset($_GET['resource'])){
		$resource = $_GET['resource'];
		
		if(isset($resource_bin[$resource])){
			$mime = 'application/octet-stream';	
			if(preg_match('/.+\.(\w+)$/',$resource,$m)){
				switch($m[1]){
					case 'jpg':
					case 'jpeg': $mime = 'image/jpeg;'; break;
					case 'html':  $mime = 'text/html'; break;
				}
				header('Content-Type: '.$mime.';');					
			}
			print(gzuncompress(base64_decode(trim(str_replace(PHP_EOL,'',$resource_bin[$resource])))));
			exit;
		}
		header('HTTP/1.1 404 Not Found');
		exit;			
	}
	$in_value = function($key,$default=null){
		$params = isset($_GET) ? $_GET : array();
		if(!isset($params[$key])) return $default;
		return $params[$key];
	};
	
	$report_dir = ($in_value('report_dir') == '') ? __DIR__.'/report' : realpath($in_value('report_dir'));	
	$dblist = array();
	
	if(is_dir($report_dir)){
		foreach(new RecursiveDirectoryIterator(
				$report_dir,
				\FilesystemIterator::CURRENT_AS_FILEINFO|\FilesystemIterator::SKIP_DOTS|\FilesystemIterator::UNIX_PATHS
		) as $e){
			if(preg_match('/^.+\.report$/',$e->getFilename())){
				$db_path = str_replace($report_dir.'/','',$e->getFilename());
				$dblist[$db_path] = $e->getMTime();
			}
		}
		if(!empty($dblist)){
			arsort($dblist);
			$dblist = array_combine(array_keys($dblist),array_keys($dblist));
		}
	}
	try{
		$uri = (isset($_SERVER['REQUEST_URI']) ? $_SERVER['REQUEST_URI'] : '');
		$db = $in_value('db');
		if(empty($db) && !empty($dblist)) $db = current($dblist);
		$db_file = \testman\Util::path_absolute($report_dir,$db);
		$template = new \testman\Template($uri.'?resource=');
		$template->vars('t',new \testman\Helper());
		$template_name = null;

		switch($in_value('view_mode')){
			case 'source':
				if($in_value('file') != ''){
					$template->vars('info',\testman\Coverage::file($db_file,$in_value('file')));
					$template->vars('file',$in_value('file'));
					$template_name = 'source';
				}
				break;
			case 'result':
				list($success,$fail,$none,$failure) = \testman\Coverage::test_result($db_file);
				$template->vars('success',$success);
				$template->vars('fail',$fail);
				$template->vars('none',$none);
				$template->vars('failure',$failure);
				$template_name = 'test_result';
				break;
			case 'all':
				list($file_list,$avg) = \testman\Coverage::all_file_list($db_file);
				$template->vars('file_list',$file_list);
				$template->vars('avg',$avg);
				$template_name = 'coverage_list';
				break;
			case 'help':
				$template_name = 'help';
				break;
			default:
		}
		if(empty($template_name)) $template_name = 'top';
		$template->vars('dblist',$dblist);
		$template->vars('db',$db);
		$template->vars('view_mode',$in_value('view_mode'));
		$template->output(__FILE__,$template_name);
	}catch(Exception $e){
		die($e->getMessage());
	}
}
exit;
?>
<rt:template name="index">
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="utf-8">
		<title>Testman</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<link href="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/css/bootstrap-combined.min.css" rel="stylesheet">	
		<style type="text/css"> 
			body{ padding-top: 60px }	
			.covered{ background-color: #ecffec; }
			.uncovered{ background-color: #ffecec; }
			.ignore{ background-color: #fcfcfc; }
			.popover{ width: 800px; }
			.code{ 
				font-family: Consolas, 'Liberation Mono', Courier, monospace; font-size: 12px; font-style: normal; font-variant: normal; font-weight: normal;
				width:100%; height: 16px; line-height: 0px; margin: 0; white-space: pre; padding-left: 10px; padding-right: 10px;		
			}
		</style>
		<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js"></script>
		<script src="http://netdna.bootstrapcdn.com/twitter-bootstrap/2.3.1/js/bootstrap.min.js"></script>
	</head>
	<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container">
				<a class="brand" href="#">Testman</a>
				<div class="nav-collapse collapse">
					<ul class="nav">
						<li class="{$t.cond_pattern_switch($view_mode,'file','active','')}"><a href="?view_mode=all&db={$db}">All</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'result','active','')}"><a href="?view_mode=result&db={$db}">Result</a></li>
						<li class="{$t.cond_pattern_switch($view_mode,'help','active','')}"><a href="?view_mode=help">Help</a></li>
					</ul>
				</div>
			</div>
		</div>
	</div>
	<div class="container">	
	<rt:block name="contents">
		<form rt:ref="true">
			<input type="hidden" name="view_mode" />
			<input type="hidden" name="path" />
			<input type="hidden" name="file" />
			<input type="hidden" name="db" />
			<select rt:param="dblist" name="db" onChange="this.form.submit()" style="width:300px;"></select>
		</form>
		<rt:block name="inner_content">
		</rt:block>		
	</rt:block>
	</div>
	<rt:block name="footer_block"></rt:block>
	</body>
	</html>
</rt:template>

<rt:template name="top">
	<rt:extends href="#help" />
	
	<rt:block name="footer_block">
		<div id="splash" class="modal hide fade" tabindex="-1" style="width:380px;">
			<div class="modal-body" style="padding: 0;">
				<img src="splash.jpg" />
			</div>
		</div>
		
		<script type="text/javascript">
		$('#splash').modal('show');
	
		setTimeout(function(){
			$('#splash').modal('hide');	
		},200);
		</script>
	</rt:block>
</rt:template>

<rt:template name="test_result">
	<rt:extends href="#index" />
	
	<rt:block name="inner_content">
	<span class="label label-success">Success: {$success}</span>
	<span class="label label-important">Failure: {$fail}</span>
	<span class="label label-warning">None: {$none}</span>
	
	<h3>Failure</h3>
	<table rt:param="{$failure}" rt:var="result" class="table table-striped table-bordered table-condensed">
	<thead>
	<tr>
		<th>file</th>
		<th>line</th>
		<th>expected</th>
		<th>actual</th>
	</tr>
	</thead>
	<tbody>
	<tr>
		<td>{$result['location']['file']}</td>
		<td style="text-align: right;">{$result['location']['line']}</td>	
		<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['expected']}</pre></td>
		<td style="padding: 0;"><pre style="border: 0; widht:100%; height:100%;">{$result['actual']}</pre></td>
	</tr>
	</tbody>
	</table>
	</rt:block>
</rt:template>

<rt:template name="source">
	<rt:extends href="#index" />

	<rt:block name="inner_content">
	<h2>{$info['file_path']}</h2>
	<table rt:param="{$info['view']}" rt:var="f" rt:counter="cnt">
	<tr class="{$f['class']} {$f['class']}_tooltip" data-content="{$t.htmlencode($t.nl2br($f['test_path']))}">
		<td align="right" style="width:50px;"><a name="{$cnt}"></a><a href="#{$cnt}">{$cnt}</a></td>
		<td class="code">{$t.htmlencode($f['value'])}</td>
	</tr>
	</table>
	<div style="height:50px;"></div>
	
	<script type="text/javascript">$('.covered_tooltip').popover({trigger: 'hover',html:true,placement:'top',title:'covered test'});</script>
	</rt:block>
</rt:template>

<rt:template name="coverage_list">
	<rt:extends href="#index" />

	<rt:block name="inner_content">
	<h2>{$db}</h2>
	<table>
	<tr>
		<td style="width:350px;">
			<div class="progress progress-striped active">
				<div class="bar bar-success" style="width: {$avg['covered']}%;"></div>
				<div class="bar bar-danger" style="width: {$avg['uncovered']}%;"></div>
			</div>
		</td>
		<td>
			<div style="height: 40px;">&nbsp;{$avg['avg']}%</div>
		</td>
	</tr>
	</table>
	<rt:if param="{$path}">
		<h3>( {$path} )</h3>
	</rt:if>
	<rt:if param="{$file_list}">
		<table rt:param="file_list" rt:var="file" class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td><a href="?view_mode=source&file={$file['file_path']}&db={$db}">{$file['file_path']}</a></td>
			<td style="width:110px;">
				<div class="progress">
					<div class="bar bar-success" style="width: {$file['covered']}%;"></div>
					<div class="bar bar-danger" style="width: {$file['uncovered']}%;"></div>
				</div>
			</td>
			<td style="width:30px; text-align: right;">{$file['percent']}%</td>
			<td style="width:80px; text-align: right; color: #666666;">{$file['covered_len']} / {$file['active_len']}</td>
		</tr>
		</tbody>
		</table>
	</rt:if>
	</rt:block>
</rt:template>

<rt:template name="help">
	<rt:extends href="#index" />
	
	<rt:block name="contents">
	<div style="margin-bottom: 50px;">
	<h3>Requirements</h3>
	<pre trans="true">
	PHP 5.3 (or later).
	must have Xdebug 2.2.1 (or later) in order to gather code coverage information.
	</pre>
	
	<div style="margin-bottom: 50px;">
	<h4>Install Xdebug</h4>
	&gt;&nbsp;<a href="http://xdebug.org/docs/install">http://xdebug.org/docs/install</a>
	
	<h5>for MAMP</h5>
	
	/Applications/MAMP/bin/php/php5.4.4/conf/php.ini
	<pre>
	[xdebug]
	zend_extension="/Applications/MAMP/bin/php/php5.4.4/lib/php/extensions/no-debug-non-zts-20100525/xdebug.so"
	xdebug.overload_var_dump = 0
	
	xdebug.profiler_output_name = %t.%s.%p.profile
	xdebug.profiler_output_dir = "/Applications/MAMP/bin/php/php5.4.4/profile"
	;xdebug.profiler_enable = 1
	xdebug.profiler_enable_trigger = 1
	
	xdebug.default_enable = 1
	xdebug.remote_enable  = 1
	xdebug.remote_port    = 9000
	xdebug.remote_handler = dbgp
	xdebug.remote_autostart = 1
	xdebug.remote_connect_back = 1
	</pre>
	<p>
	enable the profiler by using a GET/POST or COOKIE variable of the name XDEBUG_PROFILE.<Br />
	stepping PDT by sending an XDEBUG_SESSION_START=ECLIPSE_DBGP.
	</p>
	</div>
	
	<div style="margin-bottom: 50px;">
	<h4>Code coverage records in remote testing</h4>
	<a href="?coverage_client=dl">download</a> - to include this script
	</div>
	
	
	<div style="margin-bottom: 50px;">
	<h3>Running Tests</h3>
	<pre trans="true">
	&gt; php testman.php [class path or test file path]
	</pre>
	
	<h4>options</h4>
	
	<table class="table table-striped table-bordered table-condensed">
	<tbody>
	<tr>
		<td>-m</td>
		<td>method name</td>
	</tr>
	<tr>
		<td>-b</td>
		<td>block name</td>
	</tr>
	<tr>
		<td>-bootstrap</td>
		<td>bootstrap options include the path to the file</td>
	</tr>
	<tr>
		<td>-dir</td>
		<td>htdocs directory</td>
	</tr>
	<tr>
		<td>-test_dir</td>
		<td>unit test files directory</td>
	</tr>
	<tr>
		<td>-lib_dir</td>
		<td>library class files directory</td>
	</tr>
	<tr>
		<td>-func_dir</td>
		<td>function files directory</td>
	</tr>
	<tr>
		<td>-report</td>
		<td>filename for the report</td>
	</tr>
	<tr>
		<td>-xml</td>
		<td>XML output to a file of test results</td>
	</tr>
	</tbody>
	</table>
	
	<div style="margin-bottom: 20px;"></div>
	<h3>Test code for class</h3>
	<p>
		Test code for the class is described in the comment block.<br />
		(comment block /&lowast;&lowast;&lowast;〜&lowast;/ - that's <span class="text-error">three asterisks</span>)<br />
		test of the method described in the code of the method.<br />
		first line that starts with a # is a block name.<br />
		<span class="text-error">static::</span> introduces its class.
	</p>
	<pre>
	&lt;?php
	class Sample{
	&nbsp;&nbsp;public function abc($str){
	&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
	&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast; $self = new self();
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast; eq("(hoge)",$self->abc("hoge"));
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# fuga
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;}
	&nbsp;&nbsp;static public function def($str){
	&nbsp;&nbsp;&nbsp;&nbsp;return '('.$str.')';
	&nbsp;&nbsp;&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
	&nbsp;&nbsp;&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;}
	&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;eq("(hoge)",self::def("hoge"));
	&nbsp;&nbsp;&nbsp;&nbsp;$self = new self();
	&nbsp;&nbsp;&nbsp;&nbsp;eq("(fuga)",$self->abc("fuga"));
	&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp; 
	&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;# __setup__
	&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
	&nbsp;&nbsp; &lowast;/
	&nbsp;&nbsp;/&lowast;&lowast;&lowast;
	&nbsp;&nbsp;&nbsp;&nbsp;# __teardown__
	&nbsp;&nbsp;&nbsp;&nbsp;eq(true,true);
	&nbsp;&nbsp; &lowast;/
	}
	</pre>
	<p>
		__teardown__ and __setup__ is a special block name (rather than in the method) in the class. <br />
		__setup__ is called before the test block. <br />
		__teardown__ is called after the test block.
	</p>
	
	</div>
	
	
	<div style="margin-bottom: 50px;">
	<h3>Assertion functions</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>eq($expected,$actual)</td>
			<td>$expectation === $result</td>
		</tr>
		<tr>
			<td>neq($expected,$actual)</td>
			<td>$expectation !== $result</td>
		</tr>
		<tr>
			<td>meq($keyword,$string)</td>
			<td>match</td>
		</tr>
		<tr>
			<td>nmeq($keyword,$string)</td>
			<td>not match</td>
		</tr>
		<tr>
			<td>success()</td>
			<td>success</td>
		</tr>
		<tr>
			<td>fail()</td>
			<td>fail</td>
		</tr>
		<tr>
			<td>notice($msg)</td>
			<td>message</td>
		</tr>	
		</tbody>
	</table>
	</div>
	
	<div style="margin-bottom: 50px;">
	<h3>functions</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>newclass($class_source)</td>
			<td>Get a unique instances of a class</td>
		</tr>
		<tr>
			<td>pre($text)</td>
			<td>Get a heredoc</td>
		</tr>
		<tr>
			<td>test_map_url($map_name,$arg...)</td>
			<td>Get a remote url</td>
		</tr>
		<tr>
			<td>b()</td>
			<td>Get a instances of HTTP request class (<a href="#Http">Http</a>)</td>
		</tr>
		<tr>
			<td>xml(&$xml,$src,$name=null)</td>
			<td>Get a instances of XML class (<a href="#Xml">Xml</a>)</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	
	<a name="Http"></a>
	<div style="margin-bottom: 50px;">
	<h3>Class:Http method detail</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>do_post($url)</td>
			<td>POST requests</td>
		</tr>
		<tr>
			<td>do_get($url)</td>
			<td>GET requests</td>
		</tr>
		<tr>
			<td>vars($name,$value)</td>
			<td>Set up request parameter</td>
		</tr>
		<tr>
			<td>header($name,$value)</td>
			<td>Set up request header</td>
		</tr>
		<tr>
			<td>status()</td>
			<td>Gets the response status code</td>
		</tr>
		<tr>
			<td>head()</td>
			<td>Gets the response header</td>
		</tr>
		<tr>
			<td>body()</td>
			<td>Gets the response body</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	<a name="Xml"></a>
	<div style="margin-bottom: 50px;">
	<h3>Class:Xml method detail</h3>
	<table class="table table-striped table-bordered table-condensed">
		<tbody>
		<tr>
			<td>get()</td>
			<td>Gets the XML string</td>
		</tr>
		<tr>
			<td>in($name)</td>
			<td>Find of XML node</td>
		</tr>
		<tr>
			<td>in_attr($name)</td>
			<td>Gets the attribute</td>
		</tr>
		<tr>
			<td>value()</td>
			<td>Gets the Xml value</td>
		</tr>
		</tbody>
	</table>
	</div>
	
	</rt:block>

</rt:template>


